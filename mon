#!/bin/bash

PORT=/dev/ttyUSB0
PORT=/dev/serial/by-id/usb-FTDI_FT232R_USB_UART_A10M2AGQ-if00-port0

# Check the port exists
if [ ! -e $PORT ]; then
    echo Port doesn\'t exist: $PORT
    echo Run in Windows: usbipd attach --wsl --hardware-id ...
    exit
fi

# Queries a modbus device register and returns its value
# Sintax: query addr reg [type]
# Examples:
#   query 1 3 :float
#   query 2 5 
function query () {
    ADR=$1
    REG=$2
    TYP=$3
    sudo stdbuf -oL mbpoll -1 \
        $PORT -b9600 -Pnone \
        -a$ADR -r$REG -t4$TYP -B \
        | 
        # Process std output line by line
        while IFS= read -r line
        do
            # Get the Modbus register number
            REG=$(echo "$line" | grep -Eo '\[[0-9]+]: ' | grep -Eo '[0-9]+')
            if [ -z "${REG}" ]; then
               continue 
            fi

            # Get the value of the register

            # Returns a number from the end of the string.
            # Doesn't always work as it may be "(123)"
            # VAL=$(echo "$line" | grep -Eo '\-*[0-9]+\.*[0-9]*$') 

            # This returns all numbers in the string
            # The first [0] is the register number
            # The second [1] (and sometimes the third) is the register value
            # Doesnt' work for hex
            VAL=$(echo "$line" | grep -Eo '\-*[0-9]+\.*[0-9]*') # retr
            VAL=($VAL) # convert to array
            VAL=${VAL[1]}
            echo "$VAL"
        done
}

# Given a float number 1.567 truncate it to 1.5 
function truncate () {
    echo $1 | grep -Eo '^\-*[0-9]+\.*[0-9]'
}

# Check if a module's register value is what we want. Crash otherwise.
function expect () {
    val=$1; adr=$2; reg=$3; typ=$4
    ret=$(query $adr $reg $typ)
    if [ $val -ne $ret ]; then
        echo Expected the $val value for the device $val register $reg, but got $ret
        exit -1
    fi
}

expect $((0x1800)) 1 1 # Module 1 is Z-8TC
expect $((0x0e02)) 2 1 # Module 2 is Z-8AI, ver 2
expect 53777 1 54 # Config of Z-8TC, inputs 1 and 2 (53777 = 1010 010 0001 0001)
expect 53777 1 56 # Config of Z-8TC, inputs 5 and 6 (53777 = 1010 010 0001 0001)
expect   140 2 19 # Config of Z-8AI, input 1 (140 = 1000 1100)
expect   140 2 61 # Config of Z-8AI, input 8 (140 = 1000 1100)


# Ready to go...

echo -e time'\t'T hot'\t'T cold'\t'mBar'\t'T test

while true; do
    Thot=$(query 1 11 :float) 
    Tcold=$(query 1 13 :float)
    Pressure=$(query 2 10)
    Ttest=$(query 1 21 :float)

    # The range of the WORD register here is [-32000..32000]
    # Convert the WORD value to a negative, if it's > 32000
    # Note: 65535 == -1
    if [ "$Pressure" -gt "32000" ]; then
        Pressure=$(($Pressure - 65536))
    fi

    Thot=$(truncate $Thot)
    Tcold=$(truncate $Tcold)
    Ttest=$(truncate $Ttest)

    echo -e `date +%H:%M:%S`'\t'$Thot'\t'$Tcold'\t'$Pressure'\t'$Ttest
    sleep 1
done
